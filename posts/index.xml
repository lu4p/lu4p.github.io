<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on lu4p&#39;s blog</title>
    <link>https://lu4p.github.io/posts/</link>
    <description>Recent content in Posts on lu4p&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Dec 2020 22:23:20 +0100</lastBuildDate><atom:link href="https://lu4p.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Inner workings of allocating slices with go (golang)</title>
      <link>https://lu4p.github.io/posts/slices/</link>
      <pubDate>Wed, 02 Dec 2020 22:23:20 +0100</pubDate>
      
      <guid>https://lu4p.github.io/posts/slices/</guid>
      <description>I wasn&amp;rsquo;t sure what the performance impact of preallocating a slice with make vs. just letting the slice grow via append is, so I investigated a little.
Arrays In order to understand what a slice is one needs to first understand how arrays work in go.
An array&amp;rsquo;s type definition specifies a length and an element type. For example, the type [3]int represents an array of three integers.
An array&amp;rsquo;s size is fixed, its length is part of the type, so [2]int and [3]int are incompatible, e.</description>
    </item>
    
  </channel>
</rss>
